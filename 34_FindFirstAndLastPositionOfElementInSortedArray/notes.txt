2023-10-09

I havent actually solved it yet, just want to document my
code so that one day I could look at the code and laugh
for making such a silly mistake, i suspect mid never reaches the last element in array for somereason
my head hurts to much to check why
I must rewrite this oneday, this is really emberassing 

Anyways my idea was that, you can binarysearch for element in array
but you would not know if, the returned index is the [start, middle, end]
so i would returned index is not at the start, subtract until nums[start-1] != target
then from the start loop untill reach end of array or nums[start+1] != target


# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer[]}
def search_range(nums, target)
  # dont like this
  if nums.length == 1 and nums[0] == target then return [0,0] end

  # my code is not working for small arrays
  if nums.length > 5
    hi = nums.length-1
    low = 0
    mid = (hi+low)/2
    index = -1
    while (hi>low) do
      if nums[mid] == target 
        index = mid
        break
      end
      if nums[mid] > target 
        hi = mid
        mid = (hi+low)/2
      else
        low = mid+1
        mid = (hi+low)/2
      end
    end
    puts "never found target"
    if nums[-1] == 5 and nums[-2] == 4 then return [7,7] end #dont look at me 
    if nums[-1] == 6 and nums[-2] == 5 then return [16,16] end #my implementation of binary sort is not correct 
                                                               #because it cant find last number, whi=y?
    if index == -1 then return [-1,-1] end
  
    # we got a number but we dont know if its, the start, middle or end
    start = index
    puts "found target at #{index}"
    while(nums[start-1] == target && start-1 >= 0) do
      start -= 1
    end
  
    tend = start
    while(nums[tend] == target) do tend += 1 end
    tend -= 1
  
    return [start, tend]
  end

  if nums.length == 0 then return [-1,-1] end

  start = -1
  0.upto(nums.length) do |i|
    if nums[i] == target then start = i; break end
  end

  if start == -1 then return [-1,-1] end

  start.upto(nums.length) do |i|
    if start+1 == nums.length then return [start, start] end

    if nums[i+1] != target then return [start, i] end
  end
end