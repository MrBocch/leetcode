2025-05-10

I imagine can ultra optimize this by, 
lets say 
n_i is not odd, 
n_i+1 is not odd
n_i+2 is odd 

Instead of incrementing i+1, you increment by 2, knowing 
that the i+1 will be impossible.

I cant imagine it would that much faster. 
with a runtime less than 0ms, how can I see the performance gains?

The declarative solution feels like magic. 
Wish it had occured to me that I could call (.any?)
on the arr.each_cons()#Enumerable, first without needing
to look at someone elses code. Live and learn.

I also want to note that the cleaner version seems to be
2-3 ms faster than the code I originally wrote. 

Is it because im calling 1 less method?
Does the .any? method return early when it finds a case to be true?

Orignial
#each_cons -> .filter -> .all? -> .odd? -> size

Cleaner:
#each_cons -> .any?-> .all? -> .odd?

I guess in my original method it must
first create an array I can call .size() on aswell 


