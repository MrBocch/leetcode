2025-05-12

My permutation ruby solution is most likely correct
but its very slow.

constraints
3 <= digits.length <= 100

So imagine the worst case
digits.length = 100

how long would digits.permutation(3) get?

Very very big. if dig.size = 
6 -> 720 permutations
10 -> 3628800 permutations

Forget about it.
This will always always be very slow. 

Quicker data structures still wont 
save you, it did a little bit better but not much.

Generate the numbers some other way.

You can either generate the numbers in a different manner or
you shorten the amount of permutations.

Like for example [2,2,2,2,9]
2 cant show up more than 3 times in a 3 digit number so
we can eliminate a 2, given us k less permutations

In the worst case
(1 to 9) shows up 3 times -> 3 * 9 = 27
(0) shows up 3 times -> 0 cant be in first digit so its, 0 can only apear 2 times at most

27 + 2 = 29
Calculating these many permutation(29) over 100, this is a much better optimiazition.

That is so kool. I never really thought of this way before, making n smaller to 
a more managable number.

Its still quite slow, (387..394)ms, it still so cool.

How did other people solved it? They have a 15ms solution over my 400ms-ish LOOOL

C solution is 0ms with 12mb

I was really stuck on that returnSize* thing, Would have taken me a long long 
time before it would have occured to me.
And I also completly forgot about the arr->length == 0 case, 

Lots of fun using my own implementation of dynamic arrays from LC:20 (valid parenthesis), it was pretty much plug and play, only needing to change the val type to int.
Maybe I should have written it as a macro


